# code: language=ansible
---
- name: Assert required Tailscale variables are defined and valid
  ansible.builtin.assert:
    that:
      - tailscale is defined
      - tailscale.api.device.key is string or tailscale.api.device.key == ""
      - tailscale.tags is iterable
      - tailscale.enable_subnet_router is boolean
      - tailscale.magic_dns is boolean
      - tailscale.accept_routes is boolean
    fail_msg: "One or more required Tailscale variables are missing or invalid."

- name: Install Tailscale (Native)
  when: not tailscale.docker.enabled | bool
  tags: [setup, native]
  ansible.builtin.include_tasks:
    file: native.yml

- name: Install Tailscale (Docker)
  when: tailscale.docker.enabled | bool
  tags: [setup, docker]
  ansible.builtin.import_tasks:
    file: docker.yml

- name: Enable and start Tailscale service (no authkey)
  when: >
    tailscale.api.device.key is defined
    and
    tailscale.api.device.key != ""
    and
    not tailscale.docker.enabled | bool
  tags: [tailscale, native]
  ansible.builtin.systemd:
    name: tailscaled
    enabled: true
    state: started

- name: Bring up Tailscale using authkey (if provided)
  when: >
    tailscale.api.device.key is defined
    and
    tailscale.api.device.key != ""
    and
    not tailscale.docker.enabled | bool
  tags: [tailscale, native]
  ansible.builtin.command: >
    tailscale up
    --authkey {{ tailscale.api.device.key }}
    --reset
    {% if tailscale.ssh | bool %}--ssh{% endif %}
    {% if tailscale.tags is defined and tailscale.tags is iterable %}--advertise-tags={{ tailscale.tags | join(",") }}{% endif %}
    {% if tailscale.advertise_routes | default(false) %}--advertise-routes={{ tailscale.advertise_routes | join(",") }}{% endif %}
    {% if tailscale.hostname_prefix is defined and tailscale.hostname_prefix != "" %}--hostname={{ tailscale.hostname_prefix }}-{{ inventory_hostname }}{% endif %}
    {% if tailscale.magic_dns | default(false) %}--accept-dns{% endif %}
    {% if tailscale.accept_routes | default(false) %}--accept-routes{% endif %}
  changed_when: true
